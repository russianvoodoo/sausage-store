variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90
   
stages:
   - build
   - test
   - docker-build
   - release
   - notification
   - deploy
include:
   - template: Security/SAST.gitlab-ci.yml 
   - project: 'templates/ci'
     file: 'DockerInDockerTemplate.yml'

make-artifacts:
  stage: build
  script:
    - echo ${CI_PROJECT_DIR}
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
    - cd backend-report
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dmaven.test.skip
    - mkdir sausage-store-report-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - cp target/sausage-store-report-${VERSION}.jar sausage-store-report-${VERSION}/sausage-store-report-${VERSION}.jar # копирование собранного бэкенда
  rules:
     - changes:
          - backend-report/*   
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST 
      - ${CI_PROJECT_DIR}/backend-report/sausage-store-report-${VERSION}/sausage-store-report-${VERSION}.jar # сохранение собранного бэкенда как артефакт

spotbugs-sast:
  variables:
    SAST_JAVA_VERSION: "11"
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  dependencies:
    - make-artifacts
  script:
    - cd backend-report
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=04_ILYAZADOKHIN_BACKEND_REPORT
      -Dsonar.projectName=04_ИЛЬЯЗАДОХИН_БЭКЭНД_РЭПОРТ
      -Dsonar.host.url=https://${SONAR_URL}
      -Dsonar.login=${SONAR_LOGIN} 

#release:
#   stage: release
#   script:
#      - cd backend-report
#      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
#   rules:
#      - changes:
#           - backend-report/*

build-backend-report:
   stage: docker-build
   image: docker:20.10.12-dind-rootless
   dependencies:
     - make-artifacts
   before_script:
     - cp ${CI_PROJECT_DIR}/backend-report/sausage-store-report-${VERSION}/sausage-store-report-${VERSION}.jar .
     - until docker info; do sleep 1; done
     # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
     - cd backend-report
     - >
        docker build
        --build-arg VERSION=$VERSION 
        --tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
        .
     - docker push $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
   rules:
      - changes:
           - backend-report/*   

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/backend-report:latest

deploy-backend-report:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:~
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VAULT_TOKEN=${VAULT_TOKEN}";
       export "VAULT_HOST=${VAULT_HOST}";
       export "VAULT_PORT=${VAULT_PORT}";
       export "GITLAB_USER=${GITLAB_USER}";
       export "GITLAB_PASS=${GITLAB_PASS}";
       export "CI_COMMIT_SHA=${CI_COMMIT_SHA}";
      /bin/bash -s " < ./backend-report/backend_report_deploy.sh 