variables:
    VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - release
  - notification
  #- test
#include:
  #- template: Security/SAST.gitlab-ci.yml 
   
build-code-job:  # задача с именем build-code-job
  stage: build   # этап build
  script:        # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
    - cd backend 
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
    - cd ../frontend 
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - cd .. 
    - mkdir sausage-store-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    #- mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт
      #- sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST 
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт
      junit: backend/target/surefire-reports/**/*.xml #Передача результатов тестов

upload-release:
  stage: release
  script:
    - cd backend
    - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml #|| true 
    - cd .. 
    - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_FRONTEND_REPO_URL}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  #artifacts:
   # paths:
    #  - ${CI_PROJECT_DIR}/.m2/
            
slack-notification: # курлык
  stage: notification
  script:
    - > 
      curl -X POST -H "Content-type: application/json" --data '{"text": "Вышла новая версия сосисчной - `'${VERSION}'`\nСкачать фронт можно по ссылке — <'${NEXUS_FRONTEND_REPO_URL}'/sausage-store-front/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.tar.gz|backend>\nСкачать бэкенд можно по ссылке — <'${NEXUS_BACKEND_REPO_URL}'/sausage-store/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.jar|frontend>"}' https://hooks.slack.com/services/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

#spotbugs-sast:
#  variables:
#    COMPILE: "false"
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

#sonarqube-backend-sast:
#  stage: test
#  image: maven:3.8-openjdk-16
#  script:
#    - cd backend
#    - >
#      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
#      -Dsonar.projectKey=04_ILYAZADOKHIN_BACKEND
#      -Dsonar.projectName=04_ИЛЬЯЗАДОХИН_БЭКЭНД
#      -Dsonar.host.url=https://${SONAR_URL}
#      -Dsonar.login=${SONAR_LOGIN} 

#sonarqube-frontend-sast:
#  stage: test
#  image: sonarsource/sonar-scanner-cli
#  script:
#    - cd frontend 
#   - >
#      sonar-scanner
#      -Dsonar.projectName=04_ИЛЬЯЗАДОХИН_ФРОНТЭНД
#      -Dsonar.projectKey=04_ILYAZADOKHIN_FRONTEND
#      -Dsonar.sources=.
#      -Dsonar.host.url=https://${SONAR_URL}
#      -Dsonar.login=${SONAR_LOGIN} 
