stages:
  - build
  - notification
  - test
include:
  - template: Security/SAST.gitlab-ci.yml 
   
build-code-job:  # задача с именем build-code-job
  stage: build   # этап build
  script:        # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
    - cd backend 
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
    - cd ../frontend 
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - cd .. 
    - mkdir sausage-store-0.0.1  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - mv backend/target/sausage-store-0.0.1-SNAPSHOT.jar sausage-store-0.0.1/sausage-store-0.0.1.jar # копирование собранного бэкенда
    - mv frontend/dist/frontend sausage-store-0.0.1/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - sausage-store-0.0.1/public_html  # сохранение собранного фронтэнда как артефакт
      - sausage-store-0.0.1/sausage-store-0.0.1.jar # сохранение собранного бэкенда как артефакт
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST 
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт
      junit: backend/target/surefire-reports/**/*.xml #Передача результатов тестов
    
slack-notification: # курлык
  stage: notification
  script:
    - > 
      curl -X POST -H 'Content-type: application/json' --data '{"text":"**Илья Задохин** собрал приложение в Gitlab (SAST+SonarQube)."}' https://hooks.slack.com/services/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 

spotbugs-sast:
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=04_ILYAZADOKHIN_BACKEND
      -Dsonar.projectName=04_ИЛЬЯЗАДОХИН_БЭКЭНД
      -Dsonar.host.url=https://${SONAR_URL}
      -Dsonar.login=${SONAR_LOGIN} 

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend 
    - >
      sonar-scanner
      -Dsonar.projectName=04_ИЛЬЯЗАДОХИН_ФРОНТЭНД
      -Dsonar.projectKey=04_ILYAZADOKHIN_FRONTEND
      -Dsonar.sources=.
      -Dsonar.host.url=https://${SONAR_URL}
      -Dsonar.login=${SONAR_LOGIN} 
